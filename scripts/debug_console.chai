class DebugConsole {
  attr debug
  attr screen_width_tiles
  attr screen_height_tiles
  attr console_skin
  attr console_field
  attr name_area
  attr map_list_ui
  attr map_list_text_area
  attr free_camera
  attr thiss

  def DebugConsole() {
    this.debug := DebugParser()
    this.screen_width_tiles := config.getFloat("screen_width_tiles")
    this.screen_height_tiles := config.getFloat("screen_height_tiles")
    this.free_camera = false
  }

  def setScriptObjectHandle(handle) {
    this.thiss := handle
  }

  def setupConsole() {
    this.debug.addObserver(this.thiss)

    var default_text := WrappableText()
    default_text.setFont(font_generator.getFont("8bit"))
    var text := WrappableText()
    text.setFont(font_generator.getFont("8bit"))
          
    text.setShader(shader_manager.getShader("simple_text"))
    text.setHorizontalAlignment(WrappableText_HorizontalAlignment_LEFT)
    text.setVerticalAlignment(WrappableText_VerticalAlignment_VCENTER)
    text.setColor(vec4(0.1, 1.0, 0.1, 0.9))
    text.setKerning(0.12)
    default_text.setShader(shader_manager.getShader("simple_text"))
    default_text.setHorizontalAlignment(WrappableText_HorizontalAlignment_LEFT)
    default_text.setVerticalAlignment(WrappableText_VerticalAlignment_VCENTER)
    default_text.setColor(vec4(0.4, 0.4, 0.4, 0.9))
    default_text.setKerning(0.12)

    text.setActive(false)
    default_text.setActive(false)

    this.console_field := TextField_create(this.console_skin, default_text, text, vec4(0.2, 0.2, 0.2, 0.8), 0.1, this.screen_width_tiles, this.screen_height_tiles, 0.0, 0.0, 16.0, 0.75, 1)
    
    this.console_field.setActive(false)
    this.console_field.getTransform().addChild(text.getTransform())
    this.console_field.getTransform().addChild(default_text.getTransform())

    input_system.addObserver(this.console_field)
    this.console_field.addObserver(input_system)
    this.console_field.addObserver(this.debug)

    default_text.setText("click to type")
    
    var debug_console = Entity()

    debug_console.addComponent(text)
    debug_console.addComponent(default_text)
    debug_console.addComponent(this.console_field)

    camera.getTransform().addChild(debug_console.getTransform())

    component_manager.addComponents(debug_console.getComponents())

  }

  def setupLists() {
    this.map_list_ui = Entity()
    var map_list_text = WrappableText()
    map_list_text.setFont(font_generator.getFont("8bit"))
    map_list_text.setShader(shader_manager.getShader("simple_text"))
    map_list_text.setHorizontalAlignment(WrappableText_HorizontalAlignment_HCENTER)
    map_list_text.setVerticalAlignment(WrappableText_VerticalAlignment_TOP)
    map_list_text.setColor(vec4(1.0, 1.0, 1.0, 1.0))
    map_list_text.setKerning(0.12)

    this.map_list_text_area = TextArea_create(this.console_skin, map_list_text, vec4(0.2, 0.2, 0.2, 1.0), vec4(1.0, 1.0, 1.0, 1.0), 0.5, this.screen_width_tiles, this.screen_height_tiles, 0.0, 0.0, 16.0, 10.0, 2)
    
    this.map_list_ui.addComponent(map_list_text)
    this.map_list_ui.addComponent(this.map_list_text_area)

    var map_list_quit_button_text = WrappableText()
    map_list_quit_button_text.setFont(font_generator.getFont("8bit"))
    map_list_quit_button_text.setShader(shader_manager.getShader("simple_text"))

    var map_list_quit_button = QuitButton_create(this.console_skin, map_list_quit_button_text, vec4(0.6, 0.6, 0.6, 0.8), vec4(0.8, 0.0, 0.0, 0.8), this.screen_width_tiles, this.screen_height_tiles, 0.0, 0.0, 1.0, 1.0, 1)
    map_list_quit_button.getTransform().translate(vec3(this.map_list_text_area.getWidth() / 2.0 - 0.5, this.map_list_text_area.getHeight() / 2.0 - 0.5, 0.0))

    this.map_list_ui.addComponent(map_list_quit_button_text)
    this.map_list_ui.addComponent(map_list_quit_button)
    input_system.addObserver(map_list_quit_button)
    
    this.map_list_ui.setActive(false)
    camera.getTransform().addChild(this.map_list_ui.getTransform())

    component_manager.addComponents(this.map_list_ui.getComponents())

  }

  def setupHUD() {
    var hud_entity = Entity()
    var fps_text = WrappableText()
    fps_text.setFont(font_generator.getFont("8bit"))
    fps_text.setShader(shader_manager.getShader("simple_text"))
    fps_text.setKerning(0.0)

    var fps_area = TextArea_create(this.console_skin, fps_text, vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 0.8), 0.1, this.screen_width_tiles, this.screen_height_tiles, -2.0, 0.0, 5.0, 1.0, 1)
    
    fps_area.getTransform().translate(vec2(-8.0, 5.0))
    fps_counter.addObserver(fps_area)

    hud_entity.addComponent(fps_text)
    hud_entity.addComponent(fps_area)

    var name_text = WrappableText()
    name_text.setFont(font_generator.getFont("8bit"))
    name_text.setShader(shader_manager.getShader("simple_text"))
    name_text.setHorizontalAlignment(WrappableText_HorizontalAlignment_HCENTER)

    this.name_area = TextArea_create(this.console_skin, name_text, vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 1.0, 0.8), 0.1, this.screen_width_tiles, this.screen_height_tiles, 0.0, 0.0, 10.0, 1.0, 1)

    this.name_area.getTransform().translate(vec2(0.0, 5.0))
    this.thiss.addObserver(this.name_area)

    hud_entity.addComponent(name_text)
    hud_entity.addComponent(this.name_area)

    var pos_text = WrappableText()
    pos_text.setFont(font_generator.getFont("8bit"))
    pos_text.setShader(shader_manager.getShader("simple_text"))
    pos_text.setHorizontalAlignment(WrappableText_HorizontalAlignment_RIGHT)

    auto pos_area = TextArea_create(this.console_skin, pos_text, vec4(1.0, 0.0, 1.0, 0.0), vec4(1.0, 1.0, 1.0, 0.8), 0.0, this.screen_width_tiles, this.screen_height_tiles, 2.5, 0.0, 5.0, 1.0, 1)

    pos_area.getTransform().translate(vec2(8.0, 5.0))
    camera.addObserver(pos_area)

    hud_entity.addComponent(pos_text)
    hud_entity.addComponent(pos_area)

    camera.getTransform().addChild(hud_entity.getTransform())
    component_manager.addComponents(hud_entity.getComponents())
  }

  def onStart() {
    texture_manager.loadTexture("./nymph-game-one/textures/grayscale_tex.png")
    font_generator.loadFont("8bit.ttf", 48, "8bit")

    this.console_skin := Skin(texture_manager.getTexture("grayscale_tex"), shader_manager.getShader("simple_ui"))
    
    this.setupConsole()
    this.setupHUD()
    this.setupLists()
  }

  def onUpdate(delta) {
    print("Camera Z")
    print(camera.getTransform().getAbsoluteTranslation().z)
    this.debug.handleEvents()
  }

  def onDestroy() {
  }

  def handleEvent(event) {
    switch(event.getEventType()) {
      case(EventType_LIST_CHARACTERS) {
        print("List Characters")
        //showCharacterList();
        break;
      }

      case(EventType_LIST_MAPS) {
        var map_list = ""
        
        var names = engine.getSceneNames()

        map_list = names.join("\n")

        this.map_list_text_area.getText().setText(map_list)
        this.map_list_ui.setActive(true)
        print("List Maps")
        break;
      }

      case(EventType_LIST_LAYERS) {
        print("List Layers")
        //showLayerList();
        break;
      }

      case(EventType_LOAD_MAP) {
        this.thiss.notifyNow(ChangeTextEvent_create(event.getName()))
        this.thiss.notifyNow(event)
        break;
      }
      case(EventType_LOAD_CHARACTER) {
        print("Load Charater")
        break;
      }

      case(EventType_TOGGLE_FREE_CAMERA) {
        print("Toggle Free")
        if(this.free_camera) {
          this.free_camera = false
          input_system.removeObserver(camera)
          //input_system.addObserver(sprite_movement);
        }
        else {
          this.free_camera = true;
          //input_system->removeObserver(sprite_movement);
          input_system.addObserver(camera)
        }
        break;
      }

      case (EventType_TOGGLE_LAYER) {
        print("toggle layer")
        break;
      }
      case (EventType_TOGGLE_LIGHTS) {
        print("toggle lights")
        break;
      }
      case (EventType_WINDOW_EXIT) {
        print("Exit time")
        engine.timeToExit();
        break;
      }
      default {
      }
    }
  }
}
